/*
 * Q1. In your account application add validation for name, -ve balance and
 * insufficient balance and throw exception. 
 * Give appropriate message and handle exception
 */
using System;
namespace Deepak
{
    abstract partial class account
    { static int gid; int Id; string Name; double Balanceamt; }
    partial class account
    {
        static account()
        {   Console.WriteLine("ICICI BANK OF INDIA\n\n\n"); }

        public account()
        { this.Id = ++gid; }

        public int id
        { get { return this.Id; } }

        public string name
        {
            get { return this.Name; }
            set
            {
                if (value.Length < 15)
                {
                    this.Name = value;
                }
                else
                {
                    throw new Exception("name cannot be greater than 15 chars");
                }
            }
        }
        public double balance
        {
            get { return this.Balanceamt; }
            protected set { this.Balanceamt = value; }
        }
        public void deposit(int no)
        {  balance += no;  
        }
        public abstract void withdraw(int no);

        public override string ToString()
        {
            return  this.Id + "\t" + this.Name + "\t" + this.Balanceamt;
        }
    }//end of partial class account


    class saving : account
    {
        public saving(string nm, double bal)
        {
            if (bal < 0) { throw new Exception("balance can not be zero"); }
            else
            {
                name = nm;
                balance = bal;
            }
        }
        public override void withdraw(int no)
        {
            if (no > 0 && (balance - no) >= 1000)
            {
                balance -= no;
            }
            else
            {
                throw new Exception("Insufficient balance");
            }
        }
    }

    class current : account
    {
        public current(string nm, double bal)
        {
            name = nm;
            balance = bal;
        }
        public override void withdraw(int no)
        {
            if (no > 0)
            {
                balance -= no;
            }
            else
            {
                throw new Exception("cannot withdraw less than one ");
            }
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            account[] arr = new account[3];
            try
            {

                arr[0] = new saving("xyz", 30000);
            }
            catch
            {
                Console.WriteLine("inside catch");
            }
            try
            {

                arr[1] = new current("pqr", 80000);
            }
            catch
            {
                Console.WriteLine("inside catch 1");
            }

            arr[2] = new saving("lmn", 90000);

            for (int i = 0; i < 3; i++)
            {
                Console.WriteLine(arr[i]);
            }
            Console.WriteLine("\n");

            arr[1].deposit(20000);
            arr[1].withdraw(200);
            arr[2].deposit(1000);

            Console.WriteLine("after update\n");

            for (int i = 0; i < 3; i++)
            {
                Console.WriteLine(arr[i]);
            }
            /*try
            {
                arr[0].withdraw(100000);
                Console.WriteLine("\n\nafter withdrawing 1000, remaining bal in 1 is:");
                Console.WriteLine(arr[0]);
            }
            catch
            {
                Console.WriteLine("\n\nupdate after withdraw:");
                Console.WriteLine("insufficient Balance");
            }*/

            Console.Read();

        }
    }
}
