/*
Q1. In your account application add validation for 
name, -ve balance, insufficient balance and throw exception. 
Give appropriate message and handle exception
*/

using System;
namespace deepak
{
    abstract partial class account
    {static int getid;int id;string name;double balanceamt;}
    partial class account   
    {
        static account (){Console.WriteLine("BANK OF INDIA");}

        public account (){this.id=++getid;}

        public int Id{get{return this.id;}}

        public string Name
        {
            get{return this.name;} 
            set{
                if(value.Length<15)
                 this.name=value;
                else{throw new Exception ("name cannot be greater than 15 chars");}
            }
        }

        public double Balanceamt{get{return this.balanceamt;}protected  set{this.balanceamt=value;}}

        public void deposite(int no){Balanceamt+=no;}
         public abstract void withdraw(int no); 

        public override string ToString(){return this.id+""+this.name+""+this.balanceamt;}
    }
    class saving:account
    {
        public saving(string nm,double bal)
        {
            if(bal<0)
            { throw new Exception("balance can not be zero");}
            else{
                Name=nm;Balanceamt=bal;
            }
        }
        public override void withdraw(int no)
        {
            if(no > 0 && (Balanceamt-no)>=1000)
            { Balanceamt -=no;}
             else
            {
                throw new Exception("Insufficient balance");
            }
        }

    }
    class current:account
    {
        public current(string nm,double bal)
        { Name=nm;Balanceamt=bal;}

        public override void withdraw(int no)
        {
            if(no > 0 )
            { Balanceamt -=no;}
             else
            {
                throw new Exception("cannot withdraw less than one");
            }
        }
    }
    class program
    {
        static void Main(string[] args)
        {
            account [] arr=new account[3];

            try{  arr[0]=new saving(" deepak   ",9000);  }     catch{  Console.WriteLine("inside catch");  }

            try{  arr[1]=new current(" pradeep  ",10000);  }     catch{  Console.WriteLine("inside catch");  }

            arr[2] = new saving(" Akash    ", 90000);

            Console.WriteLine("\n\nprevius balance\n");
            for(int i=0;i<arr.Length;i++)
            { Console.WriteLine(arr[i]); }

            arr[0].withdraw(1000);
            arr[1].deposite(5000);
            arr[2].withdraw(10000);

            Console.WriteLine("\n\nupdated balance\n");
            for (int i = 0; i < arr.Length; i++)
            { Console.WriteLine(arr[i]); }
            /*try
            {
                arr[0].withdraw(5000);
                Console.WriteLine("\n\nremaining bal in 1 is:");
                Console.WriteLine(arr[0]);
            }
            catch
            {
                Console.WriteLine("\n\nupdate after withdraw:");
                Console.WriteLine("insufficient Balance");
            }*/
            Console.Read();

        }
    }

}
